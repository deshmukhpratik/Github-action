name: Frontend GCS Deploy Action
on:
  workflow_call:
    inputs:
      project_selection:
        description: "Name of the environment to perform deployment"
        type: string
        required: false
      build_name:
        description: 'Name of the build image'
        type: string
        required: true
      bucket_name:
        description: 'Name of the bucket backend'
        type: string
        required: true
      path_to_copy:
        description: 'Name of the path to copy in bucket'
        type: string
        required: true
      build_number:
        description: 'Build Number of artifact to pull'
        type: string
        required: true
      artifactory_repo:
        description: 'Jfrog artifactory to pull image'
        type: string
        required: true

env:
  ARTIFACTORY_USER: calantic-dev
  ARTIFACTORY_URL: https://artifactory.bayer.com/artifactory
  GCP_MAIN_PROJECT_ID: pbeat04006578-qa-f92a-calantic
  PARAM_MAP: |
    {
      "^dev-na$": {
        "region": "us-west1",
        "project_id": "",
        "folder_source": "na"
      },

      "^qa-na$": {
        "region": "us-west1",
        "project_id": "",
        "approvers":"calantic-qa-deployers",
        "folder_source": "na"
      },
      "^idev-na$": {
        "region": "us-west1",
        "project_id": "",
        "folder_source": "na"
      },
      "^uat-na$": {
        "region": "us-west1",
        "project_id": "",
        "approvers":"calantic-qa-deployers",
        "folder_source": "na"
      },
      "^prod-na$": {
        "region": "us-west1",
        "project_id": "",
        "approvers":"calantic-prod-deployers",
        "folder_source": "na"
      }
    }

jobs:
  deploy_to_gcs:
    name:  "${{inputs.project_selection}} - Deploy Artifact"
    runs-on: external-k8s-v2
    timeout-minutes: 30
    environment:
      name: ${{inputs.project_selection}}
    env:
      VERSION_NUMBER: ${{ inputs.build_number }}
      BUILD_NAME: ${{ inputs.build_name }}
      BUCKET_NAME: ${{ inputs.bucket_name }}
    steps:
      - uses: actions/checkout@v3
      - uses: jfrog/setup-jfrog-cli@0f30b43d62ccad81fba40748d2c671c4665b2d27
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@3a3c4c57d294ef65efaaee4ff17b22fa88dd3c69
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_KEY }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b'
      - id: 'secrets'
        name: 'Load secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@4d6d3dfd94110800dda8d84109cb6da0f6a5919d'
        with:
          secrets: |-
            artifactory_password:${{env.GCP_MAIN_PROJECT_ID}}/GLOBAL_artifactory_pass
      - name: Convert params to env
        uses: kanga333/variable-mapper@3681b75f5c6c00162721168fb91ab74925eaebcb
        with:
          key: "${{inputs.project_selection}}"
          map: "${{env.PARAM_MAP}}"

      - name: Download Artifact Version
        run: |
          if [ -z "$VERSION_NUMBER" ]; then
            echo "No VERSION_NUMBER provided, downloading latest"
            PATH_TO_LATEST=$(jfrog rt search ${{inputs.artifactory_repo}}/${BUILD_NAME}/ --sort-by=created --sort-order=desc --limit=1 --url ${ARTIFACTORY_URL} --user ${ARTIFACTORY_USER} --password ${{ steps.secrets.outputs.artifactory_password }} | jq -r '.[0].path')
            jf rt download ${PATH_TO_LATEST} --url ${ARTIFACTORY_URL} --user ${ARTIFACTORY_USER} --password ${{ steps.secrets.outputs.artifactory_password }} --flat
          else
            jf rt download ${{inputs.artifactory_repo}}/${BUILD_NAME}/${VERSION_NUMBER}/${BUILD_NAME}-${VERSION_NUMBER}.zip --url ${ARTIFACTORY_URL} --user ${ARTIFACTORY_USER} --password ${{ steps.secrets.outputs.artifactory_password }} --flat
          fi
      - name: Check downloaded files
        run: |
          pwd
          ls -l
      - name: Unzip Artifact
        run: |
          mkdir data
          unzip ${BUILD_NAME}-${VERSION_NUMBER}.zip -d ./data
      - name: Delete previous image
        run: gsutil -m rm -r gs://${BUCKET_NAME}/${{inputs.path_to_copy}}/** || exit 0
      - name: Upload build to bucket
        run: gsutil -m -h "Cache-Control:no-cache" cp -r data/src/${{inputs.path_to_copy}}/${{env.folder_source}}/* gs://${BUCKET_NAME}/${{inputs.path_to_copy}}/

  update_manifest_on_success:
    name: Update Secret Version Manifest on success - ${{inputs.project_selection}}
    if: ${{ success() }}
    needs: deploy_to_gcs
    uses: bayer-int/calantic-github-workflows/.github/workflows/update-release-manifest.yml@main
    secrets: inherit
    with:
      env_name: ${{ inputs.project_selection}}
      image_name: ${{ inputs.build_name }}-${{inputs.path_to_copy}}
      image_tag: ${{ inputs.build_number }}

  update_manifest_on_failure:
    name: Update Secret Version Manifest on failure - ${{inputs.project_selection}}
    if: ${{ failure() }}
    needs: deploy_to_gcs
    uses: bayer-int/calantic-github-workflows/.github/workflows/update-release-manifest.yml@main
    secrets: inherit
    with:
      env_name: ${{ inputs.project_selection}}
      image_name: ${{ inputs.build_name }}-${{inputs.path_to_copy}}
      image_tag: 'error'
